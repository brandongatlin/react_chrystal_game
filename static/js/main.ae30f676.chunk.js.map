{"version":3,"sources":["components/box/index.js","components/score/index.js","components/containers/click_box/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","react_default","a","createElement","src","alt","value","onClick","click","ScoreCard","id","score","goal","ClickBox","_useState","useState","updateState","Object","slicedToArray","forceUpdate","useCallback","buys","data","Math","floor","random","getRandomVal","useEffect","handleClick","e","oldScore","parseInt","document","getElementById","innerText","purchase","target","attributes","checkWin","handleWin","handleLose","alert","resetGame","components_score","map","icon","box","key","name","App","className","click_box","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mqBAYeA,EAVH,SAAAC,GACV,OACEC,EAAAC,EAAAC,cAAA,OACEC,IAAKJ,EAAMI,IACXC,IAAKL,EAAMK,IACXC,MAAON,EAAMM,MACbC,QAASP,EAAMQ,gBCKNC,EAXG,SAAAT,GAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,KAAGO,GAAG,SAASV,EAAMW,OACrBV,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,KAAGO,GAAG,UAAUV,EAAMY,QCkEbC,EAnEE,SAAAb,GAAS,IAAAc,EACAC,qBAAfC,EADeC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAElBK,EAAcC,sBAAY,kBAAMJ,EAAY,KAAK,IAEjDK,EAAOC,EACTX,EAAQ,EACNC,EAAOW,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAM9C,SAASC,IACP,OAAOH,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,GALzCE,oBAAU,WACRD,KACC,IAMH,IAAME,EAAc,SAAAC,GAClB,IAAMC,EAAWC,SAASC,SAASC,eAAe,SAASC,WACrDC,EAAWJ,SAASF,EAAEO,OAAOC,WAAW/B,MAAMA,OAEpDgC,EADA3B,EAAQmB,EAAWK,EACHvB,IAGZ0B,EAAW,SAAC3B,EAAOC,GAGvB,GAFAoB,SAASC,eAAe,SAASC,UAAYvB,EAEzCA,IAAUC,EACZ2B,QACK,MAAI5B,EAAQC,GAGjB,OAFA4B,MAMED,EAAY,WAChBE,MAAM,OACNC,KAGIF,EAAa,WACjBC,MAAM,QACNC,KAGIA,EAAY,WAChB/B,EAAQ,EACRqB,SAASC,eAAe,SAASC,UAAYvB,EAC7CQ,KAGF,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,CAAWhC,MAAOA,EAAOC,KAAMA,IAC9BS,EAAKuB,IAAI,SAAAC,GAAI,OACZ5C,EAAAC,EAAAC,cAAC2C,EAAD,CACEC,IAAKF,EAAKnC,GACVN,IAAKyC,EAAKzC,IACVC,IAAKwC,EAAKG,KACV1C,MAAOoB,IACPlB,MAAOoB,QCtDFqB,EARH,WACV,OACEhD,EAAAC,EAAAC,cAAA,OAAK+C,UAAU,OACbjD,EAAAC,EAAAC,cAACgD,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAAS3B,SAASC,eAAe,SD2H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ae30f676.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Box = props => {\n  return (\n    <img\n      src={props.src}\n      alt={props.alt}\n      value={props.value}\n      onClick={props.click}\n    />\n  );\n};\nexport default Box;\n","import React from \"react\";\n\nconst ScoreCard = props => {\n  return (\n    <div>\n      <p>score:</p>\n      <p id='score'>{props.score}</p>\n      <p>budget:</p>\n      <p id='budget'>{props.goal}</p>\n    </div>\n  );\n};\n\nexport default ScoreCard;\n","import React, { useEffect, useState, useCallback } from \"react\";\n\nimport Box from \"../../box\";\nimport data from \"../../../icons/transactions.json\";\n\nimport ScoreCard from \"../../score\";\n\nconst ClickBox = props => {\n  const [, updateState] = useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  const buys = data;\n  let score = 0;\n  const goal = Math.floor(Math.random() * 120 + 1);\n\n  useEffect(() => {\n    getRandomVal();\n  }, []);\n\n  function getRandomVal() {\n    return Math.floor(Math.random() * 10 + 1);\n  }\n\n  const handleClick = e => {\n    const oldScore = parseInt(document.getElementById(\"score\").innerText);\n    const purchase = parseInt(e.target.attributes.value.value);\n    score = oldScore + purchase;\n    checkWin(score, goal);\n  };\n\n  const checkWin = (score, goal) => {\n    document.getElementById(\"score\").innerText = score;\n\n    if (score === goal) {\n      handleWin();\n    } else if (score > goal) {\n      handleLose();\n    } else {\n      return;\n    }\n  };\n\n  const handleWin = () => {\n    alert(\"win\");\n    resetGame();\n  };\n\n  const handleLose = () => {\n    alert(\"lost\");\n    resetGame();\n  };\n\n  const resetGame = () => {\n    score = 0;\n    document.getElementById(\"score\").innerText = score;\n    forceUpdate();\n  };\n\n  return (\n    <div>\n      <ScoreCard score={score} goal={goal} />\n      {buys.map(icon => (\n        <Box\n          key={icon.id}\n          src={icon.src}\n          alt={icon.name}\n          value={getRandomVal()}\n          click={handleClick}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ClickBox;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport ClickBox from \"./components/containers/click_box\";\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <ClickBox />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}